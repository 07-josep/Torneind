{% extends 'base.html.twig' %}
{% block title %}Pagar Objeto{% endblock %}
{% block body %}
    <head>
        <meta charset="UTF-8">
        <link href="https://fonts.googleapis.com/css?family=Luckiest+Guy" rel="stylesheet">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
    </head>
    <style>
        .alert {
            font-family: "Inter", sans-serif;
            font-size: 1.2rem;
            color: var(--alert);
            margin-top: 0.6rem;
            display: flex;
            align-items: center;
            opacity: 0;
        }

        .alert svg {
            margin-right: 0.4rem;
        }
    </style>
    <body id="body-pay">
    <canvas id="canvas-pay" ></canvas>
    <div class="container-fluid">
        <div class="row">
            <div class="col-12 d-flex flex-column flex-lg-row">
                <div class="col-2"></div>
                <div class="col-8">
                    <div class="card-blanca-pago">
                        <div class="card-header text-center texto-pay text-white">
                            COMPRAR <span id="nombre"></span><br>
                            POR <span id="precio"> </span> <img height="60px" src="https://image.fnbr.co/price/icon_vbucks.png" />
                        </div>
                        <div class="card-body">
                            <div class="col-12 text-center d-flex flex-column flex-lg-row">
                                <div class="col-6">
                                    <div class="card-pago">
                                        <div class="card__visa">
                                            <svg class="visa" enable-background="new 0 0 291.764 291.764" version="1.1"
                                                 viewbox="5 70 290 200" xml:space="preserve" xmlns="http://www.w3.org/2000/svg">
                                        <path class="svgcolor"
                                              d="m119.26 100.23l-14.643 91.122h23.405l14.634-91.122h-23.396zm70.598 37.118c-8.179-4.039-13.193-6.765-13.193-10.896 0.1-3.756 4.24-7.604 13.485-7.604 7.604-0.191 13.193 1.596 17.433 3.374l2.124 0.948 3.182-19.065c-4.623-1.787-11.953-3.756-21.007-3.756-23.113 0-39.388 12.017-39.489 29.204-0.191 12.683 11.652 19.721 20.515 23.943 9.054 4.331 12.136 7.139 12.136 10.987-0.1 5.908-7.321 8.634-14.059 8.634-9.336 0-14.351-1.404-21.964-4.696l-3.082-1.404-3.273 19.813c5.498 2.444 15.609 4.595 26.104 4.705 24.563 0 40.546-11.835 40.747-30.152 0.08-10.048-6.165-17.744-19.659-24.035zm83.034-36.836h-18.108c-5.58 0-9.82 1.605-12.236 7.331l-34.766 83.509h24.563l6.765-18.08h27.481l3.51 18.153h21.664l-18.873-90.913zm-26.97 54.514c0.474 0.046 9.428-29.514 9.428-29.514l7.13 29.514h-16.558zm-160.86-54.796l-22.931 61.909-2.498-12.209c-4.24-14.087-17.533-29.395-32.368-36.999l20.998 78.33h24.764l36.799-91.021h-24.764v-0.01z"
                                              fill="#FFFFFF"></path>
                                                <path class="svgtipcolor"
                                                      d="m51.916 111.98c-1.787-6.948-7.486-11.634-15.226-11.734h-36.316l-0.374 1.686c28.329 6.984 52.107 28.474 59.821 48.688l-7.905-38.64z"
                                                      fill="#FFFFFF"></path>
                                    </svg>
                                        </div>
                                        <div class="card__number">0000&nbsp;0000&nbsp;0000&nbsp;0000</div>
                                        <div class="card__name">
                                            <h3>Nombre completo</h3>
                                            <p id="card-name">Nombre y apellidos</p>
                                        </div>

                                        <div class="card__expiry">
                                            <h3>Fecha caducidad</h3>
                                            <p>
                                                <span id="month">MM</span>/<span id="year">AA</span>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <form action="{{ path('/pay/shop/buy-object/object-shop-ref.ttfr-46252-llmpq_success.refid_5521452') }}" class="form">
                                        <h2>Datos del pago</h2>
                                        <div class="form__name form__detail">
                                            <label for="name">Nombre completo</label>
                                            <ion-icon name="person-outline"></ion-icon>
                                            <input type="text" placeholder="Nombre completo..." id="name" maxlength="24">
                                            <div class="alert" id="alert-1">
                                                <svg width="12" height="12" viewBox="0 0 12 12" fill="none"
                                                     xmlns="http://www.w3.org/2000/svg">
                                                    <path fill-rule="evenodd" clip-rule="evenodd"
                                                          d="M11.3163 9.00362C11.8593 10.0175 11.1335 11.25 9.99343 11.25H2.00657C0.866539 11.25 0.140732 10.0175 0.683711 9.00362L4.67714 1.54691C5.24618 0.484362 6.75381 0.484362 7.32286 1.54691L11.3163 9.00362ZM5.06238 4.49805C5.02858 3.95721 5.4581 3.5 6 3.5C6.5419 3.5 6.97142 3.95721 6.93762 4.49805L6.79678 6.75146C6.77049 7.17221 6.42157 7.5 6 7.5C5.57843 7.5 5.22951 7.17221 5.20322 6.75146L5.06238 4.49805ZM6 8C5.44772 8 5 8.44772 5 9C5 9.55229 5.44772 10 6 10C6.55228 10 7 9.55229 7 9C7 8.44772 6.55228 8 6 8Z"
                                                          fill="#FF6A96" />
                                                </svg> Nombre completo requerido</div>
                                        </div>
                                        <div class="form__number form__detail">
                                            <label for="number">Número de tarjeta</label>
                                            <ion-icon name="card-outline"></ion-icon>
                                            <input type="text" placeholder="0000 0000 0000 0000" id="number"
                                                   onkeypress="return isNumeric(event)">
                                            <div class="alert" id="alert-2">
                                                <svg width="12" height="12" viewBox="0 0 12 12" fill="none"
                                                     xmlns="http://www.w3.org/2000/svg">
                                                    <path fill-rule="evenodd" clip-rule="evenodd"
                                                          d="M11.3163 9.00362C11.8593 10.0175 11.1335 11.25 9.99343 11.25H2.00657C0.866539 11.25 0.140732 10.0175 0.683711 9.00362L4.67714 1.54691C5.24618 0.484362 6.75381 0.484362 7.32286 1.54691L11.3163 9.00362ZM5.06238 4.49805C5.02858 3.95721 5.4581 3.5 6 3.5C6.5419 3.5 6.97142 3.95721 6.93762 4.49805L6.79678 6.75146C6.77049 7.17221 6.42157 7.5 6 7.5C5.57843 7.5 5.22951 7.17221 5.20322 6.75146L5.06238 4.49805ZM6 8C5.44772 8 5 8.44772 5 9C5 9.55229 5.44772 10 6 10C6.55228 10 7 9.55229 7 9C7 8.44772 6.55228 8 6 8Z"
                                                          fill="#FF6A96" />
                                                </svg> Número de tarjeta inválido</div>
                                        </div>

                                        <div class="form__expiry form__detail">
                                            <label for="date">Data vencimiento</label>
                                            <ion-icon name="calendar-outline"></ion-icon>
                                            <input type="text" placeholder="MM/YY" id="date"
                                                   onkeypress="return isNumeric(event)">
                                            <div class="alert" id="alert-3">
                                                <svg width="12" height="12" viewBox="0 0 12 12" fill="none"
                                                     xmlns="http://www.w3.org/2000/svg">
                                                    <path fill-rule="evenodd" clip-rule="evenodd"
                                                          d="M11.3163 9.00362C11.8593 10.0175 11.1335 11.25 9.99343 11.25H2.00657C0.866539 11.25 0.140732 10.0175 0.683711 9.00362L4.67714 1.54691C5.24618 0.484362 6.75381 0.484362 7.32286 1.54691L11.3163 9.00362ZM5.06238 4.49805C5.02858 3.95721 5.4581 3.5 6 3.5C6.5419 3.5 6.97142 3.95721 6.93762 4.49805L6.79678 6.75146C6.77049 7.17221 6.42157 7.5 6 7.5C5.57843 7.5 5.22951 7.17221 5.20322 6.75146L5.06238 4.49805ZM6 8C5.44772 8 5 8.44772 5 9C5 9.55229 5.44772 10 6 10C6.55228 10 7 9.55229 7 9C7 8.44772 6.55228 8 6 8Z"
                                                          fill="#FF6A96" />
                                                </svg> Data inválida</div>
                                        </div>

                                        <div class="form__cvv form__detail">
                                            <label for="cvv">CVV</label>
                                            <ion-icon name="lock-closed-outline"></ion-icon>
                                            <input type="password" placeholder="0000" id="cvv" maxlength="4"
                                                   onkeypress="return isNumeric(event)">
                                            <div class="alert" id="alert-4">
                                                <svg width="12" height="12" viewBox="0 0 12 12" fill="none"
                                                     xmlns="http://www.w3.org/2000/svg">
                                                    <path fill-rule="evenodd" clip-rule="evenodd"
                                                          d="M11.3163 9.00362C11.8593 10.0175 11.1335 11.25 9.99343 11.25H2.00657C0.866539 11.25 0.140732 10.0175 0.683711 9.00362L4.67714 1.54691C5.24618 0.484362 6.75381 0.484362 7.32286 1.54691L11.3163 9.00362ZM5.06238 4.49805C5.02858 3.95721 5.4581 3.5 6 3.5C6.5419 3.5 6.97142 3.95721 6.93762 4.49805L6.79678 6.75146C6.77049 7.17221 6.42157 7.5 6 7.5C5.57843 7.5 5.22951 7.17221 5.20322 6.75146L5.06238 4.49805ZM6 8C5.44772 8 5 8.44772 5 9C5 9.55229 5.44772 10 6 10C6.55228 10 7 9.55229 7 9C7 8.44772 6.55228 8 6 8Z"
                                                          fill="#FF6A96" />
                                                </svg> CVV inválido</div>
                                        </div>
                                        <button type="submit" class="form__btn">Pagar</button>

                                    </form>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
                </div>
                <div class="col-2"></div>
            </div>
        </div>
    </div>
    <script src='https://unpkg.com/ionicons@5.1.2/dist/ionicons.js'></script>
    <script>
        const form = document.querySelector('.form');
        const name = document.getElementById('name');
        const number = document.getElementById('number');
        const date = document.getElementById('date');
        const cvv = document.getElementById('cvv');

        const visa = document.querySelector('.card');

        function showError(element, error) {
            if (error === true) {
                element.style.opacity = '1';
            } else {
                element.style.opacity = '0';
            }
        };

        name.addEventListener('input', function() {
            let alert1 = document.getElementById('alert-1');
            let error = this.value === '';
            showError(alert1, error);
            document.getElementById('card-name').textContent = this.value;
        });

        number.addEventListener('input', function(e) {
            this.value = numberAutoFormat();

            let error = this.value.length !== 19;
            let alert2 = document.getElementById('alert-2');
            showError(alert2, error);

            document.querySelector('.card__number').textContent = this.value;
        });

        function numberAutoFormat() {
            let valueNumber = number.value;
            let v = valueNumber.replace(/\s+/g, '').replace(/[^0-9]/gi, '');

            let matches = v.match(/\d{4,16}/g);
            let match = matches && matches[0] || '';
            let parts = [];

            for (i = 0; i < match.length; i += 4) {
                parts.push(match.substring(i, i + 4));
            }

            if (parts.length) {
                return parts.join(' ');
            } else {
                return valueNumber;
            }
        };

        date.addEventListener('input', function(e) {
            this.value = dateAutoFormat();

            let alert3 = document.getElementById('alert-3');
            showError(alert3, isNotDate(this));

            let dateNumber = date.value.match(/\d{2,4}/g);
            document.getElementById('month').textContent = dateNumber[0];
            document.getElementById('year').textContent = dateNumber[1];
        });

        function isNotDate(element) {
            let actualDate = new Date();
            let month = actualDate.getMonth() + 1;
            let year = Number(actualDate.getFullYear().toString().substr(-2));
            let dateNumber = element.value.match(/\d{2,4}/g);
            let monthNumber = Number(dateNumber[0]);
            let yearNumber = Number(dateNumber[1]);

            if (element.value === '' || monthNumber < 1 || monthNumber > 12 || yearNumber < year || (monthNumber <= month && yearNumber === year)) {
                return true;
            } else {
                return false;
            }
        }

        function dateAutoFormat() {
            let dateValue = date.value;
            let v = dateValue.replace(/\s+/g, '').replace(/[^0-9]/gi, '');

            let matches = v.match(/\d{2,4}/g);
            let match = matches && matches[0] || '';
            let parts = [];

            for (i = 0; i < match.length; i += 2) {

                parts.push(match.substring(i, i + 2));
            }

            if (parts.length) {
                return parts.join('/');
            } else {
                return dateValue;
            }
        };

        cvv.addEventListener('input', function(e) {
            let alert4 = document.getElementById('alert-4');
            let error = this.value.length < 3;
            showError(alert4, error)
        });

        function isNumeric(event) {
            if ((event.keyCode < 48 || event.keyCode > 57) && (event.keyCode > 31)) {
                return false;
            }
        };



        form.addEventListener('submit', function(e) {
            if (name.value === '' || number.value.length !== 19 || date.value.length !== 5 || isNotDate(date) === true || cvv.value.length < 3) {
                e.preventDefault();
            };
            let input = document.querySelectorAll('input');
            for (i = 0; i < input.length; i++) {
                if (input[i].value === '') {
                    input[i].nextElementSibling.style.opacity = '1';
                }
            }
        });


        let canvas = document.querySelector('canvas');
        let cw = canvas.width = window.innerWidth;
        let ch = canvas.height = window.innerHeight;

        let c = canvas.getContext('2d');

        // Generate random value between two values
        function getRandomInt(min, max) {
            min = Math.ceil(min);
            max = Math.floor(max);
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }

        // Mouse object
        let mouse = { x: '', y: '' };

        // Assign current mouse position to the mouse object
        window.addEventListener("mousemove", (e) => {
            mouse.x = e.x;
            mouse.y = e.y;
        });

        // On window resize, get the current screen size and initialize the globes
        window.addEventListener("resize", () => {
            cw = canvas.width = window.innerWidth;
            ch = canvas.height = window.innerHeight;
            init();
        });

        // Globe object
        function Globe(ox, oy, r, dx, dy, angle, dtheta, particlesArr) {
            this.ox = ox; // Origin x point
            this.oy = oy; // origin y point
            this.r = r; // Radius
            this.dx = dx; // Speed of the globe along the x-axis
            this.dy = dy; // Speed of the globe along the y-axis
            this.angle = angle; // Angle for the gradient shadow
            this.dtheta = dtheta; // Speed of gradient shadow roation
            this.particlesArr = particlesArr; // Particles array
            this.generate = () => {
                // Create circle
                c.beginPath();

                // Change direction of the globe movement
                if (this.ox + this.r > cw || this.ox - this.r < 0) { this.dx = -this.dx }
                if (this.oy + this.r > ch || this.oy - this.r < 0) { this.dy = -this.dy }

                c.arc(this.ox, this.oy, this.r, 0, Math.PI * 2);
                c.strokeStyle = '#a17ac2';
                c.shadowColor = '#a17ac2';
                c.shadowBlur = 8;
                c.stroke();
                c.shadowColor = 'transparent';

                // Change direction of gradient shadow rotation
                if (Math.floor(this.angle) == 120 || Math.floor(this.angle) == 60) { this.dtheta = -this.dtheta };
                this.angle += this.dtheta;

                // Get starting point and oppasite ending point for gradient shadows
                let px1 = this.ox + r * Math.cos(this.angle * Math.PI / 180);
                let py1 = this.oy + r * Math.sin(this.angle * Math.PI / 180);

                let px2 = this.ox + r * Math.cos((this.angle * Math.PI / 180) + Math.PI);
                let py2 = this.oy + r * Math.sin((this.angle * Math.PI / 180) + Math.PI);

                // Create gradient shadow
                let linGrd1 = c.createLinearGradient(px2, py2, px1, py1);
                let grdClr1 = '#7e318f';
                linGrd1.addColorStop(0.2, 'transparent');
                linGrd1.addColorStop(0.6, grdClr1 + '05');
                linGrd1.addColorStop(0.7, grdClr1 + '10');
                linGrd1.addColorStop(0.8, grdClr1 + '15');
                linGrd1.addColorStop(0.9, grdClr1 + '45');
                linGrd1.addColorStop(1, grdClr1 + '75');

                c.beginPath();
                c.arc(this.ox, this.oy, this.r, 0, Math.PI * 2);
                c.fillStyle = linGrd1;
                c.fill();

                // Create oppasite gradient shadow
                let linGrd2 = c.createLinearGradient(px1, py1, px2, py2);
                let grdClr2 = '#5a8aa6';
                linGrd2.addColorStop(0.2, 'transparent');
                linGrd2.addColorStop(0.6, grdClr2 + '05');
                linGrd2.addColorStop(0.7, grdClr2 + '10');
                linGrd2.addColorStop(0.8, grdClr2 + '15');
                linGrd2.addColorStop(0.9, grdClr2 + '45');
                linGrd2.addColorStop(1, grdClr2 + '75');

                c.beginPath();
                c.arc(this.ox, this.oy, this.r, 0, Math.PI * 2);
                c.fillStyle = linGrd2;
                c.fill();

                // Create particles
                let particleClr = ['#84dde5', '#da8fe3', '#fff', 'transparent']
                for (let i = 0; i < this.particlesArr.length; i++) {
                    c.beginPath();
                    c.fillStyle = particleClr[getRandomInt(0, particleClr.length - 1)];

                    let particleSize = 1.5;
                    (cw < 480) ? particleSize = 1: particleSize = 1.5;

                    // Change particle movement direction when it reaches the globe edge (If the mouse point is not hovered on a globe and if the particle is not already released)
                    if (Math.pow((this.particlesArr[i][0] - this.ox), 2) + Math.pow((this.particlesArr[i][1] - this.oy), 2) > Math.pow(this.r - particleSize, 2)) {
                        if (Math.pow((mouse.x - this.ox), 2) + Math.pow((mouse.y - this.oy), 2) > Math.pow(this.r, 2) && this.particlesArr[i][5] != 'released') {
                            this.particlesArr[i][2] = -this.particlesArr[i][2];
                            this.particlesArr[i][3] = -this.particlesArr[i][3];
                        } else {
                            // Mark particle as released
                            this.particlesArr[i][5] = 'released';

                            // Increase the spead of releasing particles
                            this.particlesArr[i][0] += 2 * this.particlesArr[i][2];
                            this.particlesArr[i][1] += 2 * this.particlesArr[i][3];
                        }
                    }

                    // Increment particle position
                    this.particlesArr[i][0] += this.particlesArr[i][2] + this.dx;
                    this.particlesArr[i][1] += this.particlesArr[i][3] + this.dy;

                    c.fillRect(this.particlesArr[i][0], this.particlesArr[i][1], particleSize, particleSize);

                }

                // Increment the globe position
                this.ox += this.dx;
                this.oy += this.dy;
            };
        }

        let globeArray = [];

        function init() {
            globeArray = []; // Reset array

            // Set max radius of globes
            let R;
            (cw < 480) ? R = 70: R = 120;

            // Create globe array with different values
            for (let i = 0; i < 8; i++) {
                let r = getRandomInt(R - 40, R); // Radius of globes

                // Define globe origin points
                let ox = getRandomInt(0 + R, cw - R);
                let oy = getRandomInt(0 + R, ch - R);

                // Get random velocity for the globe
                let dx = (Math.random() - 0.5) * 2;
                let dy = (Math.random() - 0.5) * 2;

                // Get random angle to get random starting point and oppasite ending point for gradient shadows
                let angle = getRandomInt(60, 120);

                let dtheta = 0.1; // Speed of gradient shadow rotation

                // Particles with random positions
                let particlesArr = [];
                for (let i = 0; i < 5 * r; i++) {
                    let rx = getRandomInt(ox - r, ox + r);
                    let ry = getRandomInt(oy - r, oy + r);

                    let dx = Math.random() - 0.5;
                    let dy = Math.random() - 0.5;
                    particlesArr.push([rx, ry, dx, dy, '']);

                    // Remove particles outside the globe
                    if (Math.pow((rx - ox), 2) + Math.pow((ry - oy), 2) >= Math.pow(r, 2)) {
                        particlesArr.pop();
                    }
                }

                globeArray.push(new Globe(ox, oy, r, dx, dy, angle, dtheta, particlesArr));
            }
        }
        init();

        function animate() {
            requestAnimationFrame(animate);
            c.clearRect(0, 0, cw, ch);

            for (let i = 0; i < globeArray.length; i++) {
                globeArray[i].generate(i);
            }

        }
        animate();
    </script>
    <script>
        window.onload = main;
        function main(){

            cargarDatos();
        }
        function cargarDatos(){
            var nombre = localStorage.getItem("nombre");
            var precio = localStorage.getItem("precio");
            var h1Nombre = document.getElementById('nombre');
            var h1Precio = document.getElementById('precio');
            var precioTxt = document.createTextNode(precio);
            var nombreTxt = document.createTextNode(nombre);
            h1Nombre.appendChild(nombreTxt);
            h1Precio.appendChild(precioTxt);
        }
    </script>
    </body>
{% endblock %}